#!/bin/sh
set -u

binary=$(readlink -f "./git-big")

setUp()
{
    REPO=$(mktemp -d)
    git init -q "$REPO"
    REMOTE=$(mktemp -d)
    git init -q --bare "$REMOTE"
    cd "$REPO"
    git remote add origin "$REMOTE"
}

tearDown()
{
    cd - > /dev/null
    rm -rf "$REPO" "$REMOTE"
}

testAddFile()
{
    echo foo > file.txt
    $binary add file.txt
    sha256=$(sha256sum file.txt |awk '{print $1}')

    git show $(git hash-object --stdin < file.txt) > /dev/null || fail "git object does not exist"

    [ -f "$(git rev-parse --git-dir)/refs/gig/$sha256" ] || fail "ref does not exist"

    [ -f "$(git rev-parse --git-dir)/gig/objects/$sha256" ] || fail "gig object does not exist"
    [ -w "$(git rev-parse --git-dir)/gig/objects/$sha256" ] && fail "gig object is writable"

    [ -L file.txt ] || fail "file must be a symlink"
    assertEquals "$(readlink file.txt)" ".git/gig/objects/$sha256"

    git ls-files --error-unmatch file.txt >/dev/null 2>&1 || fail "file is not in index"
}

testPushFile()
{
    echo foo > file.txt
    sha256=$(sha256sum file.txt |awk '{print $1}')
    $binary add file.txt
    $binary push file.txt

    sha1=$(cat $(git rev-parse --git-dir)/refs/gig/$sha256)

    [ -f "$REMOTE/refs/gig/$sha256" ] || fail "Remote ref does not exist"

    sha1remote=$(cat $REMOTE/refs/gig/$sha256)
    assertEquals "$sha1" "$sha1remote"
}

testPushDir()
{
    echo foo > file.txt
    sha256=$(sha256sum file.txt |awk '{print $1}')
    $binary add file.txt
    $binary push

    sha1=$(cat $(git rev-parse --git-dir)/refs/gig/$sha256)

    [ -f "$REMOTE/refs/gig/$sha256" ] || fail "Remote ref does not exist"

    sha1remote=$(cat $REMOTE/refs/gig/$sha256)
    assertEquals "$sha1" "$sha1remote"
}

testDropFile()
{
    echo foo > file.txt
    sha256=$(sha256sum file.txt |awk '{print $1}')
    $binary add file.txt
    git commit -q -m 'add file'
    $binary drop file.txt

    [ -f "$(git rev-parse --git-dir)/gig/objects/$sha256" ] && fail "object exists after drop"
    [ -f "$(git rev-parse --git-dir)/refs/gig/$sha256" ] && fail "ref exists after drop"
}

testFetchFile()
{
    echo foo > file.txt
    sha256=$(sha256sum file.txt |awk '{print $1}')
    $binary add file.txt
    $binary push file.txt
    $binary drop file.txt
    $binary fetch file.txt

    [ -f "$(git rev-parse --git-dir)/refs/gig/$sha256" ] || fail "ref does not exist"
    [ -f "$(git rev-parse --git-dir)/gig/objects/$sha256" ] || fail "gig object does not exist"
    [ -w "$(git rev-parse --git-dir)/gig/objects/$sha256" ] && fail "gig object is writable"
}

testFetchDir()
{
    echo foo > file.txt
    sha256=$(sha256sum file.txt |awk '{print $1}')
    $binary add file.txt
    $binary push file.txt
    $binary drop file.txt
    $binary fetch

    [ -f "$(git rev-parse --git-dir)/refs/gig/$sha256" ] || fail "ref does not exist"
    [ -f "$(git rev-parse --git-dir)/gig/objects/$sha256" ] || fail "gig object does not exist"
    [ -w "$(git rev-parse --git-dir)/gig/objects/$sha256" ] && fail "gig object is writable"
}

testUnlockFile()
{
    echo foo > file.txt
    sha256=$(sha256sum file.txt |awk '{print $1}')
    $binary add file.txt
    git commit -q -m 'add file'
    $binary unlock file.txt

    [ -L file.txt ] && fail "file is still a symlink"
    sha256new=$(sha256sum file.txt |awk '{print $1}')
    assertEquals "$sha256" "$sha256new"

    [ -w file.txt ] || fail "Unlocked file is not writable"
}

. shunit2
